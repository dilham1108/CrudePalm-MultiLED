# -*- coding: utf-8 -*-
"""ANN 8 Spektrum Multi Output.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aUnlAZWZPXi1l8mPDwZxs4xtlFBYFAy6
"""

import tensorflow as tf
from tensorflow import keras
from keras.models import Model
from keras.layers import Dense, Input
import numpy as np
import pandas as pd
import os
import sys

def get_dataset():
  data = pd.read_csv("Dataset JST Multi Layer Perceptron.csv")
  X = data[['IR520nm', 'IR680nm', 'IR710nm', 'IR740nm', 'IR770nm', 'IR800nm', 'IR830nm', 'IR880nm']]
  Y = data[['Kadar_minyak', 'ALB']]
  return X, Y

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X, Y = get_dataset()
Y_scaler = StandardScaler().fit(Y)
Y = Y_scaler.transform(Y)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

def build_model():
    input_layer = Input(shape=X_train.shape[1:])
    first_dense = Dense(units='512', activation='relu')(input_layer)
    second_dense = Dense(units='256', activation='relu')(first_dense)
    third_dense = Dense(units='128', activation='relu')(second_dense)
    y1_output = Dense(units='1', name='minyak')(third_dense)
    fourth_dense = Dense(units='512', activation='relu')(input_layer)
    fifth_dense = Dense(units='256', activation='relu')(fourth_dense)
    sixth_dense = Dense(units='128', activation='relu')(fifth_dense)
    y2_output = Dense(units=1, name='alb')(sixth_dense)
    model = Model(inputs=input_layer, outputs=[y1_output, y2_output])
    return model

model = build_model()
optimizer = tf.keras.optimizers.Adam()
model.compile(optimizer=optimizer, loss={'minyak': 'mean_squared_error', 'alb': 'mean_squared_error'})

history = model.fit(X_train, Y_train, epochs=1000, batch_size=169, validation_data=(X_test, Y_test))

def report_result(X, Y):
  Y = pd.DataFrame(Y)
  hasil = model.predict(X)
  minyak_result = hasil[0]
  alb_result = hasil[1]
  prediksi_array = []

  for index, item in enumerate(minyak_result):
    prediksi_array.append([item[0], alb_result[index][0]])

  prediksi = np.array(prediksi_array)
  prediksi = pd.DataFrame(Y_scaler.inverse_transform(prediksi))

  errors_minyak = []
  absolute_error_minyak = []
  tingkat_error_minyak = []
  errors_alb = []
  absolute_error_alb = []
  tingkat_error_alb = []

  for index, item in enumerate(prediksi[0]):
    minyak_asli = Y['Kadar_minyak'][index]
    minyak_prediksi = prediksi[0][index]
    errors_minyak.append(round(minyak_asli - minyak_prediksi))
    absolute = f'{abs(minyak_asli - minyak_prediksi):.2f}'
    absolute_error_minyak.append(absolute)
    tingkat_error_minyak.append(f'{(abs(minyak_asli - minyak_prediksi) / minyak_asli):.2f}')
    
    alb_asli = Y['ALB'][index]
    alb_prediksi = prediksi[1][index]
    errors_alb.append(round(alb_asli - alb_prediksi))
    absolute = f'{abs(alb_asli - alb_prediksi):.2f}'
    absolute_error_alb.append(absolute)
    tingkat_error_alb.append(f'{(abs(alb_asli - alb_prediksi) / alb_asli):.2f}')

  X.insert(8, 'Kadar Minyak', Y[['Kadar_minyak']])
  X.insert(9, 'Prediksi Minyak', prediksi[[0]])
  X.insert(10, 'Error Minyak', errors_minyak)
  X.insert(11, 'Absolute Error Minyak', absolute_error_minyak)
  X.insert(12, 'Absolute/Minyak', tingkat_error_minyak)
  X.insert(13, 'ALB', Y[['ALB']])
  X.insert(14, 'Prediksi ALB', prediksi[[1]])
  X.insert(15, 'Error ALB', errors_alb)
  X.insert(16, 'Absolute Error ALB', absolute_error_alb)
  X.insert(17, 'Absolute/ALB', tingkat_error_alb)
  X.index = np.arange(1, len(X) + 1)
  X.to_excel('/home/Hasil Prediksi Multi-Output 8 Spektrum.xlsx')

def predict(X):
  return model.predict(X)

X, Y = get_dataset()
# report_result(X, Y)
prediction = predict(np.array([0.51, 0.21, 0.58, 0.22, 0.41, 0.314, 0.213, 0.23])
print(prediction)

model.save('/content/model_minyak_alb.h5')
